version: '3.8'

services:
  frontend:
    depends_on:
      - backend
    build: './frontend'
    ports:
      - 5173:5173
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080/api
    develop:
      watch:
        - path: ./frontend/package.json
          action: rebuild
        - path: ./frontend/package-lock.json
          action: rebuild
        - path: ./frontend
          target: /usr/src/app
          action: sync
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: chairtime-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Optional: Mount init scripts
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chairtime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  migrate:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    networks:
      - chairtime-network
    volumes:
      - ./backend/migrations:/migrations
    entrypoint: [
      "sh", "-c",
      "until nc -z db 5432; do echo '‚è≥ waiting for db'; sleep 2; done; \
       migrate -path=/migrations -database postgres://postgres:1234@db:5432/postgres?sslmode=disable up"
    ]


  # Go Application
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: chairtime-app
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: 1234
      DB_NAME: postgres
      DB_SSLMODE: disable
      
      PORT: 8080
      GIN_MODE: release
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    networks:
      - chairtime-network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    healthcheck:
      test: ["CMD", "./binary", "--health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  chairtime-network:
    driver: bridge